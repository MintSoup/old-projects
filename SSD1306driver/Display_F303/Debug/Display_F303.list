
Display_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e18  08002c9c  08002c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab4  08003ab4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab4  08003ab4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab4  08003ab4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab8  08003ab8  00013ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  20000014  08003ad0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  08003ad0  00020488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000900c  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001807  00000000  00000000  00029050  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000770  00000000  00000000  0002a858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002afc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000168c8  00000000  00000000  0002b658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000785a  00000000  00000000  00041f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d8a5  00000000  00000000  0004977a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c701f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb0  00000000  00000000  000c709c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002c84 	.word	0x08002c84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08002c84 	.word	0x08002c84

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fc35 	bl	8000a3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f841 	bl	8000258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f8db 	bl	8000390 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001da:	f000 f89b 	bl	8000314 <MX_I2C1_Init>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	ssd1306_Init();
 80001de:	f000 f92d 	bl	800043c <ssd1306_Init>
	uint8_t position = 0;
 80001e2:	2300      	movs	r3, #0
 80001e4:	71fb      	strb	r3, [r7, #7]
	int8_t velocity = 1;
 80001e6:	2301      	movs	r3, #1
 80001e8:	71bb      	strb	r3, [r7, #6]
	while (1) {

		ssd1306_Fill(Black);
 80001ea:	2000      	movs	r0, #0
 80001ec:	f000 f9a2 	bl	8000534 <ssd1306_Fill>
		ssd1306_SetCursor(position % 128, 12);
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	210c      	movs	r1, #12
 80001fa:	4618      	mov	r0, r3
 80001fc:	f000 fb30 	bl	8000860 <ssd1306_SetCursor>
		ssd1306_DrawImage(aybImage, White);
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <main+0x84>)
 8000202:	2201      	movs	r2, #1
 8000204:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000208:	f000 fab6 	bl	8000778 <ssd1306_DrawImage>
		ssd1306_SetCursor(position % 128, 12 + 32);
 800020c:	79fb      	ldrb	r3, [r7, #7]
 800020e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000212:	b2db      	uxtb	r3, r3
 8000214:	212c      	movs	r1, #44	; 0x2c
 8000216:	4618      	mov	r0, r3
 8000218:	f000 fb22 	bl	8000860 <ssd1306_SetCursor>
		ssd1306_WriteString("AYB", Font_11x18, White);
 800021c:	4a0c      	ldr	r2, [pc, #48]	; (8000250 <main+0x88>)
 800021e:	2301      	movs	r3, #1
 8000220:	ca06      	ldmia	r2, {r1, r2}
 8000222:	480c      	ldr	r0, [pc, #48]	; (8000254 <main+0x8c>)
 8000224:	f000 faf6 	bl	8000814 <ssd1306_WriteString>
		ssd1306_UpdateScreen();
 8000228:	f000 f9a6 	bl	8000578 <ssd1306_UpdateScreen>
		position += velocity;
 800022c:	79ba      	ldrb	r2, [r7, #6]
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	4413      	add	r3, r2
 8000232:	71fb      	strb	r3, [r7, #7]
		if (position >= 128 - 33 || position == 0)
 8000234:	79fb      	ldrb	r3, [r7, #7]
 8000236:	2b5e      	cmp	r3, #94	; 0x5e
 8000238:	d802      	bhi.n	8000240 <main+0x78>
 800023a:	79fb      	ldrb	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d1d4      	bne.n	80001ea <main+0x22>
			velocity *= -1;
 8000240:	79bb      	ldrb	r3, [r7, #6]
 8000242:	425b      	negs	r3, r3
 8000244:	b2db      	uxtb	r3, r3
 8000246:	71bb      	strb	r3, [r7, #6]
	while (1) {
 8000248:	e7cf      	b.n	80001ea <main+0x22>
 800024a:	bf00      	nop
 800024c:	08002d20 	.word	0x08002d20
 8000250:	20000000 	.word	0x20000000
 8000254:	08002c9c 	.word	0x08002c9c

08000258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b096      	sub	sp, #88	; 0x58
 800025c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800025e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000262:	2228      	movs	r2, #40	; 0x28
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f002 fd04 	bl	8002c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800026c:	f107 031c 	add.w	r3, r7, #28
 8000270:	2200      	movs	r2, #0
 8000272:	601a      	str	r2, [r3, #0]
 8000274:	605a      	str	r2, [r3, #4]
 8000276:	609a      	str	r2, [r3, #8]
 8000278:	60da      	str	r2, [r3, #12]
 800027a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800027c:	1d3b      	adds	r3, r7, #4
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]
 8000284:	609a      	str	r2, [r3, #8]
 8000286:	60da      	str	r2, [r3, #12]
 8000288:	611a      	str	r2, [r3, #16]
 800028a:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800028c:	2303      	movs	r3, #3
 800028e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000290:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000294:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029a:	2301      	movs	r3, #1
 800029c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029e:	2310      	movs	r3, #16
 80002a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a2:	2302      	movs	r3, #2
 80002a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002ac:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 faa4 	bl	8001804 <HAL_RCC_OscConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f895 	bl	80003f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002c6:	230f      	movs	r3, #15
 80002c8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ca:	2302      	movs	r3, #2
 80002cc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ce:	2300      	movs	r3, #0
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002dc:	f107 031c 	add.w	r3, r7, #28
 80002e0:	2102      	movs	r1, #2
 80002e2:	4618      	mov	r0, r3
 80002e4:	f002 f996 	bl	8002614 <HAL_RCC_ClockConfig>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ee:	f000 f87f 	bl	80003f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80002f2:	2320      	movs	r3, #32
 80002f4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80002f6:	2300      	movs	r3, #0
 80002f8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	4618      	mov	r0, r3
 80002fe:	f002 fb6f 	bl	80029e0 <HAL_RCCEx_PeriphCLKConfig>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000308:	f000 f872 	bl	80003f0 <Error_Handler>
  }
}
 800030c:	bf00      	nop
 800030e:	3758      	adds	r7, #88	; 0x58
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}

08000314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <MX_I2C1_Init+0x74>)
 800031a:	4a1c      	ldr	r2, [pc, #112]	; (800038c <MX_I2C1_Init+0x78>)
 800031c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800031e:	4b1a      	ldr	r3, [pc, #104]	; (8000388 <MX_I2C1_Init+0x74>)
 8000320:	f240 220b 	movw	r2, #523	; 0x20b
 8000324:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000326:	4b18      	ldr	r3, [pc, #96]	; (8000388 <MX_I2C1_Init+0x74>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800032c:	4b16      	ldr	r3, [pc, #88]	; (8000388 <MX_I2C1_Init+0x74>)
 800032e:	2201      	movs	r2, #1
 8000330:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <MX_I2C1_Init+0x74>)
 8000334:	2200      	movs	r2, #0
 8000336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000338:	4b13      	ldr	r3, [pc, #76]	; (8000388 <MX_I2C1_Init+0x74>)
 800033a:	2200      	movs	r2, #0
 800033c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <MX_I2C1_Init+0x74>)
 8000340:	2200      	movs	r2, #0
 8000342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000344:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_I2C1_Init+0x74>)
 8000346:	2200      	movs	r2, #0
 8000348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <MX_I2C1_Init+0x74>)
 800034c:	2200      	movs	r2, #0
 800034e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000350:	480d      	ldr	r0, [pc, #52]	; (8000388 <MX_I2C1_Init+0x74>)
 8000352:	f000 fe53 	bl	8000ffc <HAL_I2C_Init>
 8000356:	4603      	mov	r3, r0
 8000358:	2b00      	cmp	r3, #0
 800035a:	d001      	beq.n	8000360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800035c:	f000 f848 	bl	80003f0 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000360:	2100      	movs	r1, #0
 8000362:	4809      	ldr	r0, [pc, #36]	; (8000388 <MX_I2C1_Init+0x74>)
 8000364:	f001 f9b6 	bl	80016d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800036e:	f000 f83f 	bl	80003f0 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000372:	2100      	movs	r1, #0
 8000374:	4804      	ldr	r0, [pc, #16]	; (8000388 <MX_I2C1_Init+0x74>)
 8000376:	f001 f9f8 	bl	800176a <HAL_I2CEx_ConfigDigitalFilter>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000380:	f000 f836 	bl	80003f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	20000438 	.word	0x20000438
 800038c:	40005400 	.word	0x40005400

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000396:	4b15      	ldr	r3, [pc, #84]	; (80003ec <MX_GPIO_Init+0x5c>)
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	4a14      	ldr	r2, [pc, #80]	; (80003ec <MX_GPIO_Init+0x5c>)
 800039c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003a0:	6153      	str	r3, [r2, #20]
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ae:	4b0f      	ldr	r3, [pc, #60]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	4a0e      	ldr	r2, [pc, #56]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003b8:	6153      	str	r3, [r2, #20]
 80003ba:	4b0c      	ldr	r3, [pc, #48]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c6:	4b09      	ldr	r3, [pc, #36]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a08      	ldr	r2, [pc, #32]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <MX_GPIO_Init+0x5c>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40021000 	.word	0x40021000

080003f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <ssd1306_Reset>:
#include "ssd1306.h"
#include <string.h>
#if defined(SSD1306_USE_I2C)
void ssd1306_Reset(void) {
 80003fe:	b480      	push	{r7}
 8000400:	af00      	add	r7, sp, #0
	/* for I2C - do nothing */
}
 8000402:	bf00      	nop
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b086      	sub	sp, #24
 8000410:	af04      	add	r7, sp, #16
 8000412:	4603      	mov	r3, r0
 8000414:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1,
 8000416:	f04f 33ff 	mov.w	r3, #4294967295
 800041a:	9302      	str	r3, [sp, #8]
 800041c:	2301      	movs	r3, #1
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	9300      	str	r3, [sp, #0]
 8000424:	2301      	movs	r3, #1
 8000426:	2200      	movs	r2, #0
 8000428:	2178      	movs	r1, #120	; 0x78
 800042a:	4803      	ldr	r0, [pc, #12]	; (8000438 <ssd1306_WriteCommand+0x2c>)
 800042c:	f000 fe76 	bl	800111c <HAL_I2C_Mem_Write>
	HAL_MAX_DELAY);
}
 8000430:	bf00      	nop
 8000432:	3708      	adds	r7, #8
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	20000438 	.word	0x20000438

0800043c <ssd1306_Init>:
#endif
// Screen object
static SSD1306_t SSD1306;

// Initialize the oled screen
void ssd1306_Init(void) {
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
	// Reset OLED
	ssd1306_Reset();
 8000440:	f7ff ffdd 	bl	80003fe <ssd1306_Reset>

	// Wait for the screen to boot
	HAL_Delay(100);
 8000444:	2064      	movs	r0, #100	; 0x64
 8000446:	f000 fb5f 	bl	8000b08 <HAL_Delay>
#ifdef FPS_TEST
	memset(SSD1306_BB, 0, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
	memset(SSD1306_WB, 0xFF, SSD1306_WIDTH * SSD1306_HEIGHT / 8);
#endif
	// Init OLED
	ssd1306_WriteCommand(0xAE); //display off
 800044a:	20ae      	movs	r0, #174	; 0xae
 800044c:	f7ff ffde 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000450:	2020      	movs	r0, #32
 8000452:	f7ff ffdb 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ffd8 	bl	800040c <ssd1306_WriteCommand>
								// 10b,Page Addressing Mode (RESET); 11b,Invalid

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800045c:	20c8      	movs	r0, #200	; 0xc8
 800045e:	f7ff ffd5 	bl	800040c <ssd1306_WriteCommand>
#endif

	ssd1306_WriteCommand(0x21); //set coulumn start/end address
 8000462:	2021      	movs	r0, #33	; 0x21
 8000464:	f7ff ffd2 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //start
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff ffcf 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x7F); //end
 800046e:	207f      	movs	r0, #127	; 0x7f
 8000470:	f7ff ffcc 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x22); //set page start/end address
 8000474:	2022      	movs	r0, #34	; 0x22
 8000476:	f7ff ffc9 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //start
 800047a:	2000      	movs	r0, #0
 800047c:	f7ff ffc6 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x07); //end
 8000480:	2007      	movs	r0, #7
 8000482:	f7ff ffc3 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000486:	2040      	movs	r0, #64	; 0x40
 8000488:	f7ff ffc0 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x81); //--set contrast control register - CHECK
 800048c:	2081      	movs	r0, #129	; 0x81
 800048e:	f7ff ffbd 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xFF);
 8000492:	20ff      	movs	r0, #255	; 0xff
 8000494:	f7ff ffba 	bl	800040c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000498:	20a1      	movs	r0, #161	; 0xa1
 800049a:	f7ff ffb7 	bl	800040c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
	ssd1306_WriteCommand(0xA6); //--set normal color
 800049e:	20a6      	movs	r0, #166	; 0xa6
 80004a0:	f7ff ffb4 	bl	800040c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80004a4:	20a8      	movs	r0, #168	; 0xa8
 80004a6:	f7ff ffb1 	bl	800040c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x3F); //
 80004aa:	203f      	movs	r0, #63	; 0x3f
 80004ac:	f7ff ffae 	bl	800040c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80004b0:	20a4      	movs	r0, #164	; 0xa4
 80004b2:	f7ff ffab 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80004b6:	20d3      	movs	r0, #211	; 0xd3
 80004b8:	f7ff ffa8 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 80004bc:	2000      	movs	r0, #0
 80004be:	f7ff ffa5 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80004c2:	20d5      	movs	r0, #213	; 0xd5
 80004c4:	f7ff ffa2 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 80004c8:	20f0      	movs	r0, #240	; 0xf0
 80004ca:	f7ff ff9f 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80004ce:	20d9      	movs	r0, #217	; 0xd9
 80004d0:	f7ff ff9c 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 80004d4:	2022      	movs	r0, #34	; 0x22
 80004d6:	f7ff ff99 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80004da:	20da      	movs	r0, #218	; 0xda
 80004dc:	f7ff ff96 	bl	800040c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
	ssd1306_WriteCommand(0x12);
 80004e0:	2012      	movs	r0, #18
 80004e2:	f7ff ff93 	bl	800040c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

	ssd1306_WriteCommand(0xDB); //--set vcomh
 80004e6:	20db      	movs	r0, #219	; 0xdb
 80004e8:	f7ff ff90 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80004ec:	2020      	movs	r0, #32
 80004ee:	f7ff ff8d 	bl	800040c <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80004f2:	208d      	movs	r0, #141	; 0x8d
 80004f4:	f7ff ff8a 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80004f8:	2014      	movs	r0, #20
 80004fa:	f7ff ff87 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80004fe:	20af      	movs	r0, #175	; 0xaf
 8000500:	f7ff ff84 	bl	800040c <ssd1306_WriteCommand>

	// Clear screen
	ssd1306_Fill(Black);
 8000504:	2000      	movs	r0, #0
 8000506:	f000 f815 	bl	8000534 <ssd1306_Fill>
	ssd1306_WriteCommand(0x00);
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff ff7e 	bl	800040c <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x10); //SSD1309 requires us to set nibble coulumn addresses before the first write
 8000510:	2010      	movs	r0, #16
 8000512:	f7ff ff7b 	bl	800040c <ssd1306_WriteCommand>
								//even in horizontal addressing mode for some reason
								//this command is supposed to be only for page addressing mode, but ssd1309 wants it in horizontal too
								//otherwise whatever we write will have a half page offset
								//SSD1306 doesnt require this but doesn't care
	ssd1306_UpdateScreen();
 8000516:	f000 f82f 	bl	8000578 <ssd1306_UpdateScreen>
	// Set default values for screen object
	SSD1306.CurrentX = 0;
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <ssd1306_Init+0xf4>)
 800051c:	2200      	movs	r2, #0
 800051e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000520:	4b03      	ldr	r3, [pc, #12]	; (8000530 <ssd1306_Init+0xf4>)
 8000522:	2200      	movs	r2, #0
 8000524:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000526:	4b02      	ldr	r3, [pc, #8]	; (8000530 <ssd1306_Init+0xf4>)
 8000528:	2201      	movs	r2, #1
 800052a:	715a      	strb	r2, [r3, #5]
}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000430 	.word	0x20000430

08000534 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	e00d      	b.n	8000560 <ssd1306_Fill+0x2c>
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <ssd1306_Fill+0x1a>
 800054a:	2100      	movs	r1, #0
 800054c:	e000      	b.n	8000550 <ssd1306_Fill+0x1c>
 800054e:	21ff      	movs	r1, #255	; 0xff
 8000550:	4a08      	ldr	r2, [pc, #32]	; (8000574 <ssd1306_Fill+0x40>)
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	460a      	mov	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000566:	d3ed      	bcc.n	8000544 <ssd1306_Fill+0x10>
	}
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	20000030 	.word	0x20000030

08000578 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af04      	add	r7, sp, #16
//        ssd1306_WriteCommand(0x00);
//        ssd1306_WriteCommand(0x10);
//        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
//
//    }
	HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1,
 800057e:	f04f 33ff 	mov.w	r3, #4294967295
 8000582:	9302      	str	r3, [sp, #8]
 8000584:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000588:	9301      	str	r3, [sp, #4]
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <ssd1306_UpdateScreen+0x28>)
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2301      	movs	r3, #1
 8000590:	2240      	movs	r2, #64	; 0x40
 8000592:	2178      	movs	r1, #120	; 0x78
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <ssd1306_UpdateScreen+0x2c>)
 8000596:	f000 fdc1 	bl	800111c <HAL_I2C_Mem_Write>
			SSD1306_Buffer, sizeof(SSD1306_Buffer),HAL_MAX_DELAY);

}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000030 	.word	0x20000030
 80005a4:	20000438 	.word	0x20000438

080005a8 <ssd1306_DrawPixel>:
#endif
//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
 80005b2:	460b      	mov	r3, r1
 80005b4:	71bb      	strb	r3, [r7, #6]
 80005b6:	4613      	mov	r3, r2
 80005b8:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	db48      	blt.n	8000654 <ssd1306_DrawPixel+0xac>
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	2b3f      	cmp	r3, #63	; 0x3f
 80005c6:	d845      	bhi.n	8000654 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted) {
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <ssd1306_DrawPixel+0xb8>)
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d006      	beq.n	80005de <ssd1306_DrawPixel+0x36>
		color = (SSD1306_COLOR) !color;
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	bf0c      	ite	eq
 80005d6:	2301      	moveq	r3, #1
 80005d8:	2300      	movne	r3, #0
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White) {
 80005de:	797b      	ldrb	r3, [r7, #5]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d11a      	bne.n	800061a <ssd1306_DrawPixel+0x72>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80005e4:	79fa      	ldrb	r2, [r7, #7]
 80005e6:	79bb      	ldrb	r3, [r7, #6]
 80005e8:	08db      	lsrs	r3, r3, #3
 80005ea:	b2d8      	uxtb	r0, r3
 80005ec:	4603      	mov	r3, r0
 80005ee:	01db      	lsls	r3, r3, #7
 80005f0:	4413      	add	r3, r2
 80005f2:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <ssd1306_DrawPixel+0xbc>)
 80005f4:	5cd3      	ldrb	r3, [r2, r3]
 80005f6:	b25a      	sxtb	r2, r3
 80005f8:	79bb      	ldrb	r3, [r7, #6]
 80005fa:	f003 0307 	and.w	r3, r3, #7
 80005fe:	2101      	movs	r1, #1
 8000600:	fa01 f303 	lsl.w	r3, r1, r3
 8000604:	b25b      	sxtb	r3, r3
 8000606:	4313      	orrs	r3, r2
 8000608:	b259      	sxtb	r1, r3
 800060a:	79fa      	ldrb	r2, [r7, #7]
 800060c:	4603      	mov	r3, r0
 800060e:	01db      	lsls	r3, r3, #7
 8000610:	4413      	add	r3, r2
 8000612:	b2c9      	uxtb	r1, r1
 8000614:	4a13      	ldr	r2, [pc, #76]	; (8000664 <ssd1306_DrawPixel+0xbc>)
 8000616:	54d1      	strb	r1, [r2, r3]
 8000618:	e01d      	b.n	8000656 <ssd1306_DrawPixel+0xae>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800061a:	79fa      	ldrb	r2, [r7, #7]
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	08db      	lsrs	r3, r3, #3
 8000620:	b2d8      	uxtb	r0, r3
 8000622:	4603      	mov	r3, r0
 8000624:	01db      	lsls	r3, r3, #7
 8000626:	4413      	add	r3, r2
 8000628:	4a0e      	ldr	r2, [pc, #56]	; (8000664 <ssd1306_DrawPixel+0xbc>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	b25a      	sxtb	r2, r3
 800062e:	79bb      	ldrb	r3, [r7, #6]
 8000630:	f003 0307 	and.w	r3, r3, #7
 8000634:	2101      	movs	r1, #1
 8000636:	fa01 f303 	lsl.w	r3, r1, r3
 800063a:	b25b      	sxtb	r3, r3
 800063c:	43db      	mvns	r3, r3
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4013      	ands	r3, r2
 8000642:	b259      	sxtb	r1, r3
 8000644:	79fa      	ldrb	r2, [r7, #7]
 8000646:	4603      	mov	r3, r0
 8000648:	01db      	lsls	r3, r3, #7
 800064a:	4413      	add	r3, r2
 800064c:	b2c9      	uxtb	r1, r1
 800064e:	4a05      	ldr	r2, [pc, #20]	; (8000664 <ssd1306_DrawPixel+0xbc>)
 8000650:	54d1      	strb	r1, [r2, r3]
 8000652:	e000      	b.n	8000656 <ssd1306_DrawPixel+0xae>
		return;
 8000654:	bf00      	nop
	}
}
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr
 8000660:	20000430 	.word	0x20000430
 8000664:	20000030 	.word	0x20000030

08000668 <ssd1306_WriteChar>:

char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
 800066e:	4604      	mov	r4, r0
 8000670:	1d38      	adds	r0, r7, #4
 8000672:	e880 0006 	stmia.w	r0, {r1, r2}
 8000676:	461a      	mov	r2, r3
 8000678:	4623      	mov	r3, r4
 800067a:	73fb      	strb	r3, [r7, #15]
 800067c:	4613      	mov	r3, r2
 800067e:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check if character is valid
	if (ch < 32 || ch > 126)
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b1f      	cmp	r3, #31
 8000684:	d902      	bls.n	800068c <ssd1306_WriteChar+0x24>
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	2b7e      	cmp	r3, #126	; 0x7e
 800068a:	d901      	bls.n	8000690 <ssd1306_WriteChar+0x28>
		return 0;
 800068c:	2300      	movs	r3, #0
 800068e:	e06d      	b.n	800076c <ssd1306_WriteChar+0x104>

	// Check remaining space on current line
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000690:	4b38      	ldr	r3, [pc, #224]	; (8000774 <ssd1306_WriteChar+0x10c>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	793b      	ldrb	r3, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	2b80      	cmp	r3, #128	; 0x80
 800069c:	dc06      	bgt.n	80006ac <ssd1306_WriteChar+0x44>
	SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight)) {
 800069e:	4b35      	ldr	r3, [pc, #212]	; (8000774 <ssd1306_WriteChar+0x10c>)
 80006a0:	885b      	ldrh	r3, [r3, #2]
 80006a2:	461a      	mov	r2, r3
 80006a4:	797b      	ldrb	r3, [r7, #5]
 80006a6:	4413      	add	r3, r2
	if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80006a8:	2b40      	cmp	r3, #64	; 0x40
 80006aa:	dd01      	ble.n	80006b0 <ssd1306_WriteChar+0x48>
		// Not enough space on current line
		return 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	e05d      	b.n	800076c <ssd1306_WriteChar+0x104>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++) {
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
 80006b4:	e04c      	b.n	8000750 <ssd1306_WriteChar+0xe8>
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	3b20      	subs	r3, #32
 80006bc:	7979      	ldrb	r1, [r7, #5]
 80006be:	fb01 f303 	mul.w	r3, r1, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	440b      	add	r3, r1
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	4413      	add	r3, r2
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++) {
 80006d0:	2300      	movs	r3, #0
 80006d2:	61bb      	str	r3, [r7, #24]
 80006d4:	e034      	b.n	8000740 <ssd1306_WriteChar+0xd8>
			if ((b << j) & 0x8000) {
 80006d6:	697a      	ldr	r2, [r7, #20]
 80006d8:	69bb      	ldr	r3, [r7, #24]
 80006da:	fa02 f303 	lsl.w	r3, r2, r3
 80006de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d012      	beq.n	800070c <ssd1306_WriteChar+0xa4>
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 80006e6:	4b23      	ldr	r3, [pc, #140]	; (8000774 <ssd1306_WriteChar+0x10c>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	69bb      	ldr	r3, [r7, #24]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4413      	add	r3, r2
 80006f2:	b2d8      	uxtb	r0, r3
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <ssd1306_WriteChar+0x10c>)
 80006f6:	885b      	ldrh	r3, [r3, #2]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	69fb      	ldr	r3, [r7, #28]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4413      	add	r3, r2
 8000700:	b2db      	uxtb	r3, r3
 8000702:	7bba      	ldrb	r2, [r7, #14]
 8000704:	4619      	mov	r1, r3
 8000706:	f7ff ff4f 	bl	80005a8 <ssd1306_DrawPixel>
 800070a:	e016      	b.n	800073a <ssd1306_WriteChar+0xd2>
						(SSD1306_COLOR) color);
			} else {
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i),
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <ssd1306_WriteChar+0x10c>)
 800070e:	881b      	ldrh	r3, [r3, #0]
 8000710:	b2da      	uxtb	r2, r3
 8000712:	69bb      	ldr	r3, [r7, #24]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	4413      	add	r3, r2
 8000718:	b2d8      	uxtb	r0, r3
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <ssd1306_WriteChar+0x10c>)
 800071c:	885b      	ldrh	r3, [r3, #2]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4413      	add	r3, r2
 8000726:	b2d9      	uxtb	r1, r3
 8000728:	7bbb      	ldrb	r3, [r7, #14]
 800072a:	2b00      	cmp	r3, #0
 800072c:	bf0c      	ite	eq
 800072e:	2301      	moveq	r3, #1
 8000730:	2300      	movne	r3, #0
 8000732:	b2db      	uxtb	r3, r3
 8000734:	461a      	mov	r2, r3
 8000736:	f7ff ff37 	bl	80005a8 <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++) {
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	3301      	adds	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
 8000740:	793b      	ldrb	r3, [r7, #4]
 8000742:	461a      	mov	r2, r3
 8000744:	69bb      	ldr	r3, [r7, #24]
 8000746:	4293      	cmp	r3, r2
 8000748:	d3c5      	bcc.n	80006d6 <ssd1306_WriteChar+0x6e>
	for (i = 0; i < Font.FontHeight; i++) {
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3301      	adds	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
 8000750:	797b      	ldrb	r3, [r7, #5]
 8000752:	461a      	mov	r2, r3
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	4293      	cmp	r3, r2
 8000758:	d3ad      	bcc.n	80006b6 <ssd1306_WriteChar+0x4e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <ssd1306_WriteChar+0x10c>)
 800075c:	881a      	ldrh	r2, [r3, #0]
 800075e:	793b      	ldrb	r3, [r7, #4]
 8000760:	b29b      	uxth	r3, r3
 8000762:	4413      	add	r3, r2
 8000764:	b29a      	uxth	r2, r3
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <ssd1306_WriteChar+0x10c>)
 8000768:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 800076a:	7bfb      	ldrb	r3, [r7, #15]
}
 800076c:	4618      	mov	r0, r3
 800076e:	3724      	adds	r7, #36	; 0x24
 8000770:	46bd      	mov	sp, r7
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	20000430 	.word	0x20000430

08000778 <ssd1306_DrawImage>:

void ssd1306_DrawImage(Image img, SSD1306_COLOR color) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	f107 0308 	add.w	r3, r7, #8
 8000782:	e883 0003 	stmia.w	r3, {r0, r1}
 8000786:	4613      	mov	r3, r2
 8000788:	71fb      	strb	r3, [r7, #7]
	for (uint16_t a = 0; a < img.width; a++) {
 800078a:	2300      	movs	r3, #0
 800078c:	82fb      	strh	r3, [r7, #22]
 800078e:	e035      	b.n	80007fc <ssd1306_DrawImage+0x84>
		for (uint16_t b = 0; b < img.height; b++) {
 8000790:	2300      	movs	r3, #0
 8000792:	82bb      	strh	r3, [r7, #20]
 8000794:	e02a      	b.n	80007ec <ssd1306_DrawImage+0x74>
			uint8_t byte = img.data[a + (b / 8 * img.width)];
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	8af9      	ldrh	r1, [r7, #22]
 800079a:	8aba      	ldrh	r2, [r7, #20]
 800079c:	08d2      	lsrs	r2, r2, #3
 800079e:	b292      	uxth	r2, r2
 80007a0:	7a38      	ldrb	r0, [r7, #8]
 80007a2:	fb00 f202 	mul.w	r2, r0, r2
 80007a6:	440a      	add	r2, r1
 80007a8:	4413      	add	r3, r2
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	74fb      	strb	r3, [r7, #19]
			if ((byte >> (b % 8)) & 0x01) {
 80007ae:	7cfa      	ldrb	r2, [r7, #19]
 80007b0:	8abb      	ldrh	r3, [r7, #20]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	fa42 f303 	asr.w	r3, r2, r3
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d011      	beq.n	80007e6 <ssd1306_DrawImage+0x6e>
				ssd1306_DrawPixel(SSD1306.CurrentX + a, (SSD1306.CurrentY + b),
 80007c2:	4b13      	ldr	r3, [pc, #76]	; (8000810 <ssd1306_DrawImage+0x98>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	b2da      	uxtb	r2, r3
 80007c8:	8afb      	ldrh	r3, [r7, #22]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4413      	add	r3, r2
 80007ce:	b2d8      	uxtb	r0, r3
 80007d0:	4b0f      	ldr	r3, [pc, #60]	; (8000810 <ssd1306_DrawImage+0x98>)
 80007d2:	885b      	ldrh	r3, [r3, #2]
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	8abb      	ldrh	r3, [r7, #20]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	4413      	add	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	79fa      	ldrb	r2, [r7, #7]
 80007e0:	4619      	mov	r1, r3
 80007e2:	f7ff fee1 	bl	80005a8 <ssd1306_DrawPixel>
		for (uint16_t b = 0; b < img.height; b++) {
 80007e6:	8abb      	ldrh	r3, [r7, #20]
 80007e8:	3301      	adds	r3, #1
 80007ea:	82bb      	strh	r3, [r7, #20]
 80007ec:	7a7b      	ldrb	r3, [r7, #9]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	8aba      	ldrh	r2, [r7, #20]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d3cf      	bcc.n	8000796 <ssd1306_DrawImage+0x1e>
	for (uint16_t a = 0; a < img.width; a++) {
 80007f6:	8afb      	ldrh	r3, [r7, #22]
 80007f8:	3301      	adds	r3, #1
 80007fa:	82fb      	strh	r3, [r7, #22]
 80007fc:	7a3b      	ldrb	r3, [r7, #8]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	8afa      	ldrh	r2, [r7, #22]
 8000802:	429a      	cmp	r2, r3
 8000804:	d3c4      	bcc.n	8000790 <ssd1306_DrawImage+0x18>
						(SSD1306_COLOR) color);
			}
		}
	}
}
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000430 	.word	0x20000430

08000814 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char *str, FontDef Font, SSD1306_COLOR color) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	1d38      	adds	r0, r7, #4
 800081e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000822:	70fb      	strb	r3, [r7, #3]
// Write until null-byte
	while (*str) {
 8000824:	e012      	b.n	800084c <ssd1306_WriteString+0x38>
		if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	7818      	ldrb	r0, [r3, #0]
 800082a:	78fb      	ldrb	r3, [r7, #3]
 800082c:	1d3a      	adds	r2, r7, #4
 800082e:	ca06      	ldmia	r2, {r1, r2}
 8000830:	f7ff ff1a 	bl	8000668 <ssd1306_WriteChar>
 8000834:	4603      	mov	r3, r0
 8000836:	461a      	mov	r2, r3
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	429a      	cmp	r2, r3
 800083e:	d002      	beq.n	8000846 <ssd1306_WriteString+0x32>
			// Char could not be written
			return *str;
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	e008      	b.n	8000858 <ssd1306_WriteString+0x44>
		}

// Next char
		str++;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	3301      	adds	r3, #1
 800084a:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d1e8      	bne.n	8000826 <ssd1306_WriteString+0x12>
	}

// Everything ok
	return *str;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	781b      	ldrb	r3, [r3, #0]
}
 8000858:	4618      	mov	r0, r3
 800085a:	3710      	adds	r7, #16
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}

08000860 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	460a      	mov	r2, r1
 800086a:	71fb      	strb	r3, [r7, #7]
 800086c:	4613      	mov	r3, r2
 800086e:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	b29a      	uxth	r2, r3
 8000874:	4b05      	ldr	r3, [pc, #20]	; (800088c <ssd1306_SetCursor+0x2c>)
 8000876:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000878:	79bb      	ldrb	r3, [r7, #6]
 800087a:	b29a      	uxth	r2, r3
 800087c:	4b03      	ldr	r3, [pc, #12]	; (800088c <ssd1306_SetCursor+0x2c>)
 800087e:	805a      	strh	r2, [r3, #2]
}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr
 800088c:	20000430 	.word	0x20000430

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0f      	ldr	r3, [pc, #60]	; (80008d4 <HAL_MspInit+0x44>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	4a0e      	ldr	r2, [pc, #56]	; (80008d4 <HAL_MspInit+0x44>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6193      	str	r3, [r2, #24]
 80008a2:	4b0c      	ldr	r3, [pc, #48]	; (80008d4 <HAL_MspInit+0x44>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ae:	4b09      	ldr	r3, [pc, #36]	; (80008d4 <HAL_MspInit+0x44>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <HAL_MspInit+0x44>)
 80008b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b8:	61d3      	str	r3, [r2, #28]
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <HAL_MspInit+0x44>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a17      	ldr	r2, [pc, #92]	; (8000954 <HAL_I2C_MspInit+0x7c>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d127      	bne.n	800094a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fa:	4b17      	ldr	r3, [pc, #92]	; (8000958 <HAL_I2C_MspInit+0x80>)
 80008fc:	695b      	ldr	r3, [r3, #20]
 80008fe:	4a16      	ldr	r2, [pc, #88]	; (8000958 <HAL_I2C_MspInit+0x80>)
 8000900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000904:	6153      	str	r3, [r2, #20]
 8000906:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_I2C_MspInit+0x80>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000912:	23c0      	movs	r3, #192	; 0xc0
 8000914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000916:	2312      	movs	r3, #18
 8000918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800091a:	2301      	movs	r3, #1
 800091c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000922:	2304      	movs	r3, #4
 8000924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 0314 	add.w	r3, r7, #20
 800092a:	4619      	mov	r1, r3
 800092c:	480b      	ldr	r0, [pc, #44]	; (800095c <HAL_I2C_MspInit+0x84>)
 800092e:	f000 f9f3 	bl	8000d18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_I2C_MspInit+0x80>)
 8000934:	69db      	ldr	r3, [r3, #28]
 8000936:	4a08      	ldr	r2, [pc, #32]	; (8000958 <HAL_I2C_MspInit+0x80>)
 8000938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800093c:	61d3      	str	r3, [r2, #28]
 800093e:	4b06      	ldr	r3, [pc, #24]	; (8000958 <HAL_I2C_MspInit+0x80>)
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40005400 	.word	0x40005400
 8000958:	40021000 	.word	0x40021000
 800095c:	48000400 	.word	0x48000400

08000960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000972:	e7fe      	b.n	8000972 <HardFault_Handler+0x4>

08000974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000978:	e7fe      	b.n	8000978 <MemManage_Handler+0x4>

0800097a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800097e:	e7fe      	b.n	800097e <BusFault_Handler+0x4>

08000980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <UsageFault_Handler+0x4>

08000986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000998:	bf00      	nop
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f888 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <SystemInit+0x28>)
 80009c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c6:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <SystemInit+0x28>)
 80009c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <SystemInit+0x28>)
 80009d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009d6:	609a      	str	r2, [r3, #8]
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80009ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80009ee:	e003      	b.n	80009f8 <LoopCopyDataInit>

080009f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80009f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80009f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80009f6:	3104      	adds	r1, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80009f8:	480b      	ldr	r0, [pc, #44]	; (8000a28 <LoopForever+0xa>)
	ldr	r3, =_edata
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <LoopForever+0xe>)
	adds	r2, r0, r1
 80009fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80009fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a00:	d3f6      	bcc.n	80009f0 <CopyDataInit>
	ldr	r2, =_sbss
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a04:	e002      	b.n	8000a0c <LoopFillZerobss>

08000a06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a08:	f842 3b04 	str.w	r3, [r2], #4

08000a0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <LoopForever+0x16>)
	cmp	r2, r3
 8000a0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a10:	d3f9      	bcc.n	8000a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a12:	f7ff ffd3 	bl	80009bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a16:	f002 f909 	bl	8002c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fbd5 	bl	80001c8 <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a20:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000a24:	08003abc 	.word	0x08003abc
	ldr	r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a2c:	20000014 	.word	0x20000014
	ldr	r2, =_sbss
 8000a30:	20000014 	.word	0x20000014
	ldr	r3, = _ebss
 8000a34:	20000488 	.word	0x20000488

08000a38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_2_IRQHandler>
	...

08000a3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x28>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x28>)
 8000a46:	f043 0310 	orr.w	r3, r3, #16
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f92f 	bl	8000cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff ff1a 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f939 	bl	8000cfe <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f90f 	bl	8000cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000008 	.word	0x20000008
 8000ac0:	20000010 	.word	0x20000010
 8000ac4:	2000000c 	.word	0x2000000c

08000ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000010 	.word	0x20000010
 8000aec:	20000484 	.word	0x20000484

08000af0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;  
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000484 	.word	0x20000484

08000b08 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_Delay+0x40>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000010 	.word	0x20000010

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	6039      	str	r1, [r7, #0]
 8000bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	db0a      	blt.n	8000bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	490c      	ldr	r1, [pc, #48]	; (8000bfc <__NVIC_SetPriority+0x4c>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	0112      	lsls	r2, r2, #4
 8000bd0:	b2d2      	uxtb	r2, r2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bd8:	e00a      	b.n	8000bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4908      	ldr	r1, [pc, #32]	; (8000c00 <__NVIC_SetPriority+0x50>)
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	f003 030f 	and.w	r3, r3, #15
 8000be6:	3b04      	subs	r3, #4
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	b2d2      	uxtb	r2, r2
 8000bec:	440b      	add	r3, r1
 8000bee:	761a      	strb	r2, [r3, #24]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100
 8000c00:	e000ed00 	.word	0xe000ed00

08000c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c18:	69fb      	ldr	r3, [r7, #28]
 8000c1a:	f1c3 0307 	rsb	r3, r3, #7
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	bf28      	it	cs
 8000c22:	2304      	movcs	r3, #4
 8000c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	2b06      	cmp	r3, #6
 8000c2c:	d902      	bls.n	8000c34 <NVIC_EncodePriority+0x30>
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	3b03      	subs	r3, #3
 8000c32:	e000      	b.n	8000c36 <NVIC_EncodePriority+0x32>
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c38:	f04f 32ff 	mov.w	r2, #4294967295
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43da      	mvns	r2, r3
 8000c44:	68bb      	ldr	r3, [r7, #8]
 8000c46:	401a      	ands	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa01 f303 	lsl.w	r3, r1, r3
 8000c56:	43d9      	mvns	r1, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c5c:	4313      	orrs	r3, r2
         );
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3724      	adds	r7, #36	; 0x24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c7c:	d301      	bcc.n	8000c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00f      	b.n	8000ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c82:	4a0a      	ldr	r2, [pc, #40]	; (8000cac <SysTick_Config+0x40>)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	3b01      	subs	r3, #1
 8000c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff ff8e 	bl	8000bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c94:	4b05      	ldr	r3, [pc, #20]	; (8000cac <SysTick_Config+0x40>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c9a:	4b04      	ldr	r3, [pc, #16]	; (8000cac <SysTick_Config+0x40>)
 8000c9c:	2207      	movs	r2, #7
 8000c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	e000e010 	.word	0xe000e010

08000cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cb8:	6878      	ldr	r0, [r7, #4]
 8000cba:	f7ff ff47 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b086      	sub	sp, #24
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	4603      	mov	r3, r0
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cd8:	f7ff ff5c 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	68b9      	ldr	r1, [r7, #8]
 8000ce2:	6978      	ldr	r0, [r7, #20]
 8000ce4:	f7ff ff8e 	bl	8000c04 <NVIC_EncodePriority>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff5d 	bl	8000bb0 <__NVIC_SetPriority>
}
 8000cf6:	bf00      	nop
 8000cf8:	3718      	adds	r7, #24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ffb0 	bl	8000c6c <SysTick_Config>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
	...

08000d18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b087      	sub	sp, #28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d26:	e14e      	b.n	8000fc6 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	fa01 f303 	lsl.w	r3, r1, r3
 8000d34:	4013      	ands	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f000 8140 	beq.w	8000fc0 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <HAL_GPIO_Init+0x38>
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b12      	cmp	r3, #18
 8000d4e:	d123      	bne.n	8000d98 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	08da      	lsrs	r2, r3, #3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3208      	adds	r2, #8
 8000d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	f003 0307 	and.w	r3, r3, #7
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	220f      	movs	r2, #15
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4013      	ands	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	691a      	ldr	r2, [r3, #16]
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	f003 0307 	and.w	r3, r3, #7
 8000d7e:	009b      	lsls	r3, r3, #2
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4313      	orrs	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	08da      	lsrs	r2, r3, #3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3208      	adds	r2, #8
 8000d92:	6939      	ldr	r1, [r7, #16]
 8000d94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	2203      	movs	r2, #3
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0203 	and.w	r2, r3, #3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d00b      	beq.n	8000dec <HAL_GPIO_Init+0xd4>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d007      	beq.n	8000dec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de0:	2b11      	cmp	r3, #17
 8000de2:	d003      	beq.n	8000dec <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2b12      	cmp	r3, #18
 8000dea:	d130      	bne.n	8000e4e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	689b      	ldr	r3, [r3, #8]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	2203      	movs	r2, #3
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	43db      	mvns	r3, r3
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	693a      	ldr	r2, [r7, #16]
 8000e1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e22:	2201      	movs	r2, #1
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 0201 	and.w	r2, r3, #1
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	68db      	ldr	r3, [r3, #12]
 8000e52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	2203      	movs	r2, #3
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	689a      	ldr	r2, [r3, #8]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	693a      	ldr	r2, [r7, #16]
 8000e7c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	f000 809a 	beq.w	8000fc0 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8c:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a54      	ldr	r2, [pc, #336]	; (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <HAL_GPIO_Init+0x2cc>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ea4:	4a50      	ldr	r2, [pc, #320]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ece:	d013      	beq.n	8000ef8 <HAL_GPIO_Init+0x1e0>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	4a46      	ldr	r2, [pc, #280]	; (8000fec <HAL_GPIO_Init+0x2d4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d00d      	beq.n	8000ef4 <HAL_GPIO_Init+0x1dc>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4a45      	ldr	r2, [pc, #276]	; (8000ff0 <HAL_GPIO_Init+0x2d8>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d007      	beq.n	8000ef0 <HAL_GPIO_Init+0x1d8>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	4a44      	ldr	r2, [pc, #272]	; (8000ff4 <HAL_GPIO_Init+0x2dc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d101      	bne.n	8000eec <HAL_GPIO_Init+0x1d4>
 8000ee8:	2303      	movs	r3, #3
 8000eea:	e006      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000eec:	2305      	movs	r3, #5
 8000eee:	e004      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e002      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	e000      	b.n	8000efa <HAL_GPIO_Init+0x1e2>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	f002 0203 	and.w	r2, r2, #3
 8000f00:	0092      	lsls	r2, r2, #2
 8000f02:	4093      	lsls	r3, r2
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f0a:	4937      	ldr	r1, [pc, #220]	; (8000fe8 <HAL_GPIO_Init+0x2d0>)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f18:	4b37      	ldr	r3, [pc, #220]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	43db      	mvns	r3, r3
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4013      	ands	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f3c:	4a2e      	ldr	r2, [pc, #184]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f66:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6c:	4b22      	ldr	r3, [pc, #136]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43db      	mvns	r3, r3
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d003      	beq.n	8000f90 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f90:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f96:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fba:	4a0f      	ldr	r2, [pc, #60]	; (8000ff8 <HAL_GPIO_Init+0x2e0>)
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f47f aea9 	bne.w	8000d28 <HAL_GPIO_Init+0x10>
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	371c      	adds	r7, #28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	40010000 	.word	0x40010000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	48000800 	.word	0x48000800
 8000ff4:	48000c00 	.word	0x48000c00
 8000ff8:	40010400 	.word	0x40010400

08000ffc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e081      	b.n	8001112 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d106      	bne.n	8001028 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fc58 	bl	80008d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2224      	movs	r2, #36	; 0x24
 800102c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0201 	bic.w	r2, r2, #1
 800103e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800104c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	689a      	ldr	r2, [r3, #8]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800105c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d107      	bne.n	8001076 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	e006      	b.n	8001084 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001082:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	2b02      	cmp	r3, #2
 800108a:	d104      	bne.n	8001096 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001094:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	687a      	ldr	r2, [r7, #4]
 800109e:	6812      	ldr	r2, [r2, #0]
 80010a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010a8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68da      	ldr	r2, [r3, #12]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80010b8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691a      	ldr	r2, [r3, #16]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	695b      	ldr	r3, [r3, #20]
 80010c2:	ea42 0103 	orr.w	r1, r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	021a      	lsls	r2, r3, #8
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	430a      	orrs	r2, r1
 80010d2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69d9      	ldr	r1, [r3, #28]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0201 	orr.w	r2, r2, #1
 80010f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2220      	movs	r2, #32
 80010fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b088      	sub	sp, #32
 8001120:	af02      	add	r7, sp, #8
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	4608      	mov	r0, r1
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4603      	mov	r3, r0
 800112c:	817b      	strh	r3, [r7, #10]
 800112e:	460b      	mov	r3, r1
 8001130:	813b      	strh	r3, [r7, #8]
 8001132:	4613      	mov	r3, r2
 8001134:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b20      	cmp	r3, #32
 8001140:	f040 80f9 	bne.w	8001336 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001144:	6a3b      	ldr	r3, [r7, #32]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <HAL_I2C_Mem_Write+0x34>
 800114a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800114c:	2b00      	cmp	r3, #0
 800114e:	d105      	bne.n	800115c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001156:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	e0ed      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001162:	2b01      	cmp	r3, #1
 8001164:	d101      	bne.n	800116a <HAL_I2C_Mem_Write+0x4e>
 8001166:	2302      	movs	r3, #2
 8001168:	e0e6      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001172:	f7ff fcbd 	bl	8000af0 <HAL_GetTick>
 8001176:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2319      	movs	r3, #25
 800117e:	2201      	movs	r2, #1
 8001180:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001184:	68f8      	ldr	r0, [r7, #12]
 8001186:	f000 f955 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e0d1      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	2221      	movs	r2, #33	; 0x21
 8001198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2240      	movs	r2, #64	; 0x40
 80011a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	2200      	movs	r2, #0
 80011a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	6a3a      	ldr	r2, [r7, #32]
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80011b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	2200      	movs	r2, #0
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80011bc:	88f8      	ldrh	r0, [r7, #6]
 80011be:	893a      	ldrh	r2, [r7, #8]
 80011c0:	8979      	ldrh	r1, [r7, #10]
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	9301      	str	r3, [sp, #4]
 80011c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	4603      	mov	r3, r0
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 f8b9 	bl	8001344 <I2C_RequestMemoryWrite>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0a9      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	2bff      	cmp	r3, #255	; 0xff
 80011ec:	d90e      	bls.n	800120c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	22ff      	movs	r2, #255	; 0xff
 80011f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	8979      	ldrh	r1, [r7, #10]
 80011fc:	2300      	movs	r3, #0
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001204:	68f8      	ldr	r0, [r7, #12]
 8001206:	f000 fa37 	bl	8001678 <I2C_TransferConfig>
 800120a:	e00f      	b.n	800122c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001210:	b29a      	uxth	r2, r3
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800121a:	b2da      	uxtb	r2, r3
 800121c:	8979      	ldrh	r1, [r7, #10]
 800121e:	2300      	movs	r3, #0
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 fa26 	bl	8001678 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f93f 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e07b      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800125a:	b29b      	uxth	r3, r3
 800125c:	3b01      	subs	r3, #1
 800125e:	b29a      	uxth	r2, r3
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001268:	3b01      	subs	r3, #1
 800126a:	b29a      	uxth	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001274:	b29b      	uxth	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d034      	beq.n	80012e4 <HAL_I2C_Mem_Write+0x1c8>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800127e:	2b00      	cmp	r3, #0
 8001280:	d130      	bne.n	80012e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001288:	2200      	movs	r2, #0
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f000 f8d1 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e04d      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	2bff      	cmp	r3, #255	; 0xff
 80012a4:	d90e      	bls.n	80012c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	22ff      	movs	r2, #255	; 0xff
 80012aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	8979      	ldrh	r1, [r7, #10]
 80012b4:	2300      	movs	r3, #0
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 f9db 	bl	8001678 <I2C_TransferConfig>
 80012c2:	e00f      	b.n	80012e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	8979      	ldrh	r1, [r7, #10]
 80012d6:	2300      	movs	r3, #0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f9ca 	bl	8001678 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d19e      	bne.n	800122c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012ee:	697a      	ldr	r2, [r7, #20]
 80012f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 f91e 	bl	8001534 <I2C_WaitOnSTOPFlagUntilTimeout>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e01a      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2220      	movs	r2, #32
 8001308:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6859      	ldr	r1, [r3, #4]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_I2C_Mem_Write+0x224>)
 8001316:	400b      	ands	r3, r1
 8001318:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2220      	movs	r2, #32
 800131e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2200      	movs	r2, #0
 800132e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e000      	b.n	8001338 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001336:	2302      	movs	r3, #2
  }
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	fe00e800 	.word	0xfe00e800

08001344 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af02      	add	r7, sp, #8
 800134a:	60f8      	str	r0, [r7, #12]
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	461a      	mov	r2, r3
 8001352:	4603      	mov	r3, r0
 8001354:	817b      	strh	r3, [r7, #10]
 8001356:	460b      	mov	r3, r1
 8001358:	813b      	strh	r3, [r7, #8]
 800135a:	4613      	mov	r3, r2
 800135c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	8979      	ldrh	r1, [r7, #10]
 8001364:	4b20      	ldr	r3, [pc, #128]	; (80013e8 <I2C_RequestMemoryWrite+0xa4>)
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f000 f983 	bl	8001678 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	69b9      	ldr	r1, [r7, #24]
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f89c 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e02c      	b.n	80013e0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001386:	88fb      	ldrh	r3, [r7, #6]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800138c:	893b      	ldrh	r3, [r7, #8]
 800138e:	b2da      	uxtb	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	629a      	str	r2, [r3, #40]	; 0x28
 8001396:	e015      	b.n	80013c4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001398:	893b      	ldrh	r3, [r7, #8]
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b29b      	uxth	r3, r3
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	69b9      	ldr	r1, [r7, #24]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f882 	bl	80014b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e012      	b.n	80013e0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80013ba:	893b      	ldrh	r3, [r7, #8]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	2200      	movs	r2, #0
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f830 	bl	8001434 <I2C_WaitOnFlagUntilTimeout>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e000      	b.n	80013e0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3710      	adds	r7, #16
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	80002000 	.word	0x80002000

080013ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d103      	bne.n	800140a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2200      	movs	r2, #0
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	2b01      	cmp	r3, #1
 8001416:	d007      	beq.n	8001428 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	619a      	str	r2, [r3, #24]
  }
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001444:	e022      	b.n	800148c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800144c:	d01e      	beq.n	800148c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800144e:	f7ff fb4f 	bl	8000af0 <HAL_GetTick>
 8001452:	4602      	mov	r2, r0
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d302      	bcc.n	8001464 <I2C_WaitOnFlagUntilTimeout+0x30>
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d113      	bne.n	800148c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001468:	f043 0220 	orr.w	r2, r3, #32
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2220      	movs	r2, #32
 8001474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e00f      	b.n	80014ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	699a      	ldr	r2, [r3, #24]
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	4013      	ands	r3, r2
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	429a      	cmp	r2, r3
 800149a:	bf0c      	ite	eq
 800149c:	2301      	moveq	r3, #1
 800149e:	2300      	movne	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	461a      	mov	r2, r3
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d0cd      	beq.n	8001446 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014c0:	e02c      	b.n	800151c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	68f8      	ldr	r0, [r7, #12]
 80014c8:	f000 f870 	bl	80015ac <I2C_IsAcknowledgeFailed>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e02a      	b.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d01e      	beq.n	800151c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80014de:	f7ff fb07 	bl	8000af0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d302      	bcc.n	80014f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d113      	bne.n	800151c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f8:	f043 0220 	orr.w	r2, r3, #32
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2220      	movs	r2, #32
 8001504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2200      	movs	r2, #0
 800150c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e007      	b.n	800152c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b02      	cmp	r3, #2
 8001528:	d1cb      	bne.n	80014c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001540:	e028      	b.n	8001594 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f830 	bl	80015ac <I2C_IsAcknowledgeFailed>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e026      	b.n	80015a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001556:	f7ff facb 	bl	8000af0 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	429a      	cmp	r2, r3
 8001564:	d302      	bcc.n	800156c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d113      	bne.n	8001594 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	f043 0220 	orr.w	r2, r3, #32
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	2200      	movs	r2, #0
 8001584:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e007      	b.n	80015a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0320 	and.w	r3, r3, #32
 800159e:	2b20      	cmp	r3, #32
 80015a0:	d1cf      	bne.n	8001542 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0310 	and.w	r3, r3, #16
 80015c2:	2b10      	cmp	r3, #16
 80015c4:	d151      	bne.n	800166a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015c6:	e022      	b.n	800160e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ce:	d01e      	beq.n	800160e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015d0:	f7ff fa8e 	bl	8000af0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	68ba      	ldr	r2, [r7, #8]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d302      	bcc.n	80015e6 <I2C_IsAcknowledgeFailed+0x3a>
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d113      	bne.n	800160e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	f043 0220 	orr.w	r2, r3, #32
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2220      	movs	r2, #32
 80015f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e02e      	b.n	800166c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	f003 0320 	and.w	r3, r3, #32
 8001618:	2b20      	cmp	r3, #32
 800161a:	d1d5      	bne.n	80015c8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2210      	movs	r2, #16
 8001622:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2220      	movs	r2, #32
 800162a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fedd 	bl	80013ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <I2C_IsAcknowledgeFailed+0xc8>)
 800163e:	400b      	ands	r3, r1
 8001640:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001646:	f043 0204 	orr.w	r2, r3, #4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	2220      	movs	r2, #32
 8001652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e000      	b.n	800166c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	fe00e800 	.word	0xfe00e800

08001678 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	817b      	strh	r3, [r7, #10]
 8001686:	4613      	mov	r3, r2
 8001688:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	0d5b      	lsrs	r3, r3, #21
 8001694:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001698:	4b0d      	ldr	r3, [pc, #52]	; (80016d0 <I2C_TransferConfig+0x58>)
 800169a:	430b      	orrs	r3, r1
 800169c:	43db      	mvns	r3, r3
 800169e:	ea02 0103 	and.w	r1, r2, r3
 80016a2:	897b      	ldrh	r3, [r7, #10]
 80016a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80016a8:	7a7b      	ldrb	r3, [r7, #9]
 80016aa:	041b      	lsls	r3, r3, #16
 80016ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	431a      	orrs	r2, r3
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	430a      	orrs	r2, r1
 80016c0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	03ff63ff 	.word	0x03ff63ff

080016d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	2b20      	cmp	r3, #32
 80016e8:	d138      	bne.n	800175c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e032      	b.n	800175e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2224      	movs	r2, #36	; 0x24
 8001704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0201 	bic.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001726:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6819      	ldr	r1, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 0201 	orr.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800175c:	2302      	movs	r3, #2
  }
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr

0800176a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800176a:	b480      	push	{r7}
 800176c:	b085      	sub	sp, #20
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2b20      	cmp	r3, #32
 800177e:	d139      	bne.n	80017f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001786:	2b01      	cmp	r3, #1
 8001788:	d101      	bne.n	800178e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800178a:	2302      	movs	r3, #2
 800178c:	e033      	b.n	80017f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2201      	movs	r2, #1
 8001792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2224      	movs	r2, #36	; 0x24
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0201 	bic.w	r2, r2, #1
 80017ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0201 	orr.w	r2, r2, #1
 80017de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e000      	b.n	80017f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80017f4:	2302      	movs	r3, #2
  }
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800180a:	af00      	add	r7, sp, #0
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d102      	bne.n	800181e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	f000 bef4 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 816a 	beq.w	8001b02 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800182e:	4bb3      	ldr	r3, [pc, #716]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800183a:	4bb0      	ldr	r3, [pc, #704]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b08      	cmp	r3, #8
 8001844:	d159      	bne.n	80018fa <HAL_RCC_OscConfig+0xf6>
 8001846:	4bad      	ldr	r3, [pc, #692]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001852:	d152      	bne.n	80018fa <HAL_RCC_OscConfig+0xf6>
 8001854:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001858:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001860:	fa93 f3a3 	rbit	r3, r3
 8001864:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001868:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0x82>
 8001880:	4b9e      	ldr	r3, [pc, #632]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	e015      	b.n	80018b2 <HAL_RCC_OscConfig+0xae>
 8001886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800188a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800188e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001892:	fa93 f3a3 	rbit	r3, r3
 8001896:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800189a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800189e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80018a2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80018a6:	fa93 f3a3 	rbit	r3, r3
 80018aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80018ae:	4b93      	ldr	r3, [pc, #588]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 80018b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018b6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80018ba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80018be:	fa92 f2a2 	rbit	r2, r2
 80018c2:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80018c6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80018ca:	fab2 f282 	clz	r2, r2
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	f042 0220 	orr.w	r2, r2, #32
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	f002 021f 	and.w	r2, r2, #31
 80018da:	2101      	movs	r1, #1
 80018dc:	fa01 f202 	lsl.w	r2, r1, r2
 80018e0:	4013      	ands	r3, r2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 810c 	beq.w	8001b00 <HAL_RCC_OscConfig+0x2fc>
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	f040 8106 	bne.w	8001b00 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	f000 be86 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001904:	d106      	bne.n	8001914 <HAL_RCC_OscConfig+0x110>
 8001906:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a7c      	ldr	r2, [pc, #496]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800190c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001910:	6013      	str	r3, [r2, #0]
 8001912:	e030      	b.n	8001976 <HAL_RCC_OscConfig+0x172>
 8001914:	1d3b      	adds	r3, r7, #4
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x134>
 800191e:	4b77      	ldr	r3, [pc, #476]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a76      	ldr	r2, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001924:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	4b74      	ldr	r3, [pc, #464]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a73      	ldr	r2, [pc, #460]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001930:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01e      	b.n	8001976 <HAL_RCC_OscConfig+0x172>
 8001938:	1d3b      	adds	r3, r7, #4
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x15a>
 8001944:	4b6d      	ldr	r3, [pc, #436]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a6c      	ldr	r2, [pc, #432]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800194a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a69      	ldr	r2, [pc, #420]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x172>
 800195e:	4b67      	ldr	r3, [pc, #412]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a66      	ldr	r2, [pc, #408]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b64      	ldr	r3, [pc, #400]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a63      	ldr	r2, [pc, #396]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001974:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001976:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f023 020f 	bic.w	r2, r3, #15
 800197e:	1d3b      	adds	r3, r7, #4
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	495d      	ldr	r1, [pc, #372]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001986:	4313      	orrs	r3, r2
 8001988:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d059      	beq.n	8001a48 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff f8ac 	bl	8000af0 <HAL_GetTick>
 8001998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800199e:	f7ff f8a7 	bl	8000af0 <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d902      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f000 be29 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 80019b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019b8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019bc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80019c8:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d102      	bne.n	80019e6 <HAL_RCC_OscConfig+0x1e2>
 80019e0:	4b46      	ldr	r3, [pc, #280]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	e015      	b.n	8001a12 <HAL_RCC_OscConfig+0x20e>
 80019e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ea:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ee:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80019f2:	fa93 f3a3 	rbit	r3, r3
 80019f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80019fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019fe:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001a02:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001a06:	fa93 f3a3 	rbit	r3, r3
 8001a0a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001a0e:	4b3b      	ldr	r3, [pc, #236]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a16:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001a1a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001a26:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ab      	beq.n	800199e <HAL_RCC_OscConfig+0x19a>
 8001a46:	e05c      	b.n	8001b02 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff f852 	bl	8000af0 <HAL_GetTick>
 8001a4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a52:	f7ff f84d 	bl	8000af0 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	; 0x64
 8001a60:	d902      	bls.n	8001a68 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	f000 bdcf 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 8001a68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a6c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a70:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001a74:	fa93 f3a3 	rbit	r3, r3
 8001a78:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001a7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a80:	fab3 f383 	clz	r3, r3
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d102      	bne.n	8001a9a <HAL_RCC_OscConfig+0x296>
 8001a94:	4b19      	ldr	r3, [pc, #100]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	e015      	b.n	8001ac6 <HAL_RCC_OscConfig+0x2c2>
 8001a9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a9e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001aa6:	fa93 f3a3 	rbit	r3, r3
 8001aaa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001aae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ab2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ab6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001aba:	fa93 f3a3 	rbit	r3, r3
 8001abe:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	; (8001afc <HAL_RCC_OscConfig+0x2f8>)
 8001ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001aca:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001ace:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001ada:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001ade:	fab2 f282 	clz	r2, r2
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	f042 0220 	orr.w	r2, r2, #32
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	f002 021f 	and.w	r2, r2, #31
 8001aee:	2101      	movs	r1, #1
 8001af0:	fa01 f202 	lsl.w	r2, r1, r2
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1ab      	bne.n	8001a52 <HAL_RCC_OscConfig+0x24e>
 8001afa:	e002      	b.n	8001b02 <HAL_RCC_OscConfig+0x2fe>
 8001afc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	f000 816f 	beq.w	8001df0 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001b12:	4bd0      	ldr	r3, [pc, #832]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f003 030c 	and.w	r3, r3, #12
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d00b      	beq.n	8001b36 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001b1e:	4bcd      	ldr	r3, [pc, #820]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 030c 	and.w	r3, r3, #12
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d16c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x400>
 8001b2a:	4bca      	ldr	r3, [pc, #808]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d166      	bne.n	8001c04 <HAL_RCC_OscConfig+0x400>
 8001b36:	2302      	movs	r3, #2
 8001b38:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b3c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001b40:	fa93 f3a3 	rbit	r3, r3
 8001b44:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001b48:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4c:	fab3 f383 	clz	r3, r3
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	095b      	lsrs	r3, r3, #5
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d102      	bne.n	8001b66 <HAL_RCC_OscConfig+0x362>
 8001b60:	4bbc      	ldr	r3, [pc, #752]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	e013      	b.n	8001b8e <HAL_RCC_OscConfig+0x38a>
 8001b66:	2302      	movs	r3, #2
 8001b68:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001b78:	2302      	movs	r3, #2
 8001b7a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b7e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b82:	fa93 f3a3 	rbit	r3, r3
 8001b86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001b8a:	4bb2      	ldr	r3, [pc, #712]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001b94:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b98:	fa92 f2a2 	rbit	r2, r2
 8001b9c:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001ba0:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d007      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d002      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	f000 bd1b 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd0:	4ba0      	ldr	r3, [pc, #640]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	21f8      	movs	r1, #248	; 0xf8
 8001be0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001be8:	fa91 f1a1 	rbit	r1, r1
 8001bec:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001bf0:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001bf4:	fab1 f181 	clz	r1, r1
 8001bf8:	b2c9      	uxtb	r1, r1
 8001bfa:	408b      	lsls	r3, r1
 8001bfc:	4995      	ldr	r1, [pc, #596]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e0f5      	b.n	8001df0 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	f000 8085 	beq.w	8001d1a <HAL_RCC_OscConfig+0x516>
 8001c10:	2301      	movs	r3, #1
 8001c12:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 8001c1e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001c22:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c30:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	461a      	mov	r2, r3
 8001c38:	2301      	movs	r3, #1
 8001c3a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7fe ff58 	bl	8000af0 <HAL_GetTick>
 8001c40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e00a      	b.n	8001c5c <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c46:	f7fe ff53 	bl	8000af0 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d902      	bls.n	8001c5c <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	f000 bcd5 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c62:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001c66:	fa93 f3a3 	rbit	r3, r3
 8001c6a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001c6e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d102      	bne.n	8001c8c <HAL_RCC_OscConfig+0x488>
 8001c86:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	e013      	b.n	8001cb4 <HAL_RCC_OscConfig+0x4b0>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001ca4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001cba:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001cbe:	fa92 f2a2 	rbit	r2, r2
 8001cc2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001cc6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001cca:	fab2 f282 	clz	r2, r2
 8001cce:	b2d2      	uxtb	r2, r2
 8001cd0:	f042 0220 	orr.w	r2, r2, #32
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	f002 021f 	and.w	r2, r2, #31
 8001cda:	2101      	movs	r1, #1
 8001cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0af      	beq.n	8001c46 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce6:	4b5b      	ldr	r3, [pc, #364]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	695b      	ldr	r3, [r3, #20]
 8001cf4:	21f8      	movs	r1, #248	; 0xf8
 8001cf6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001cfe:	fa91 f1a1 	rbit	r1, r1
 8001d02:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001d06:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d0a:	fab1 f181 	clz	r1, r1
 8001d0e:	b2c9      	uxtb	r1, r1
 8001d10:	408b      	lsls	r3, r1
 8001d12:	4950      	ldr	r1, [pc, #320]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
 8001d18:	e06a      	b.n	8001df0 <HAL_RCC_OscConfig+0x5ec>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001d24:	fa93 f3a3 	rbit	r3, r3
 8001d28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001d2c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d30:	fab3 f383 	clz	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d3a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	461a      	mov	r2, r3
 8001d42:	2300      	movs	r3, #0
 8001d44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7fe fed3 	bl	8000af0 <HAL_GetTick>
 8001d4a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4e:	e00a      	b.n	8001d66 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d50:	f7fe fece 	bl	8000af0 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d902      	bls.n	8001d66 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001d60:	2303      	movs	r3, #3
 8001d62:	f000 bc50 	b.w	8002606 <HAL_RCC_OscConfig+0xe02>
 8001d66:	2302      	movs	r3, #2
 8001d68:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	095b      	lsrs	r3, r3, #5
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d102      	bne.n	8001d96 <HAL_RCC_OscConfig+0x592>
 8001d90:	4b30      	ldr	r3, [pc, #192]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	e013      	b.n	8001dbe <HAL_RCC_OscConfig+0x5ba>
 8001d96:	2302      	movs	r3, #2
 8001d98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001da0:	fa93 f3a3 	rbit	r3, r3
 8001da4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001da8:	2302      	movs	r3, #2
 8001daa:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001dae:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001dba:	4b26      	ldr	r3, [pc, #152]	; (8001e54 <HAL_RCC_OscConfig+0x650>)
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001dc4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001dc8:	fa92 f2a2 	rbit	r2, r2
 8001dcc:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8001dd0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001dd4:	fab2 f282 	clz	r2, r2
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	f042 0220 	orr.w	r2, r2, #32
 8001dde:	b2d2      	uxtb	r2, r2
 8001de0:	f002 021f 	and.w	r2, r2, #31
 8001de4:	2101      	movs	r1, #1
 8001de6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1af      	bne.n	8001d50 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	f000 80da 	beq.w	8001fb4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d069      	beq.n	8001ede <HAL_RCC_OscConfig+0x6da>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e10:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001e14:	fa93 f3a3 	rbit	r3, r3
 8001e18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e20:	fab3 f383 	clz	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b0b      	ldr	r3, [pc, #44]	; (8001e58 <HAL_RCC_OscConfig+0x654>)
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	461a      	mov	r2, r3
 8001e30:	2301      	movs	r3, #1
 8001e32:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7fe fe5c 	bl	8000af0 <HAL_GetTick>
 8001e38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3c:	e00e      	b.n	8001e5c <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7fe fe57 	bl	8000af0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d906      	bls.n	8001e5c <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e3d9      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 8001e52:	bf00      	nop
 8001e54:	40021000 	.word	0x40021000
 8001e58:	10908120 	.word	0x10908120
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001e6e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e72:	2202      	movs	r2, #2
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	fa93 f2a3 	rbit	r2, r3
 8001e98:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001e9c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9e:	4ba5      	ldr	r3, [pc, #660]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001ea0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ea2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001ea6:	2102      	movs	r1, #2
 8001ea8:	6019      	str	r1, [r3, #0]
 8001eaa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	fa93 f1a3 	rbit	r1, r3
 8001eb4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001eb8:	6019      	str	r1, [r3, #0]
  return result;
 8001eba:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	fab3 f383 	clz	r3, r3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f003 031f 	and.w	r3, r3, #31
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0b0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x63a>
 8001edc:	e06a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x7b0>
 8001ede:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ef4:	601a      	str	r2, [r3, #0]
  return result;
 8001ef6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001efa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b8c      	ldr	r3, [pc, #560]	; (8002138 <HAL_RCC_OscConfig+0x934>)
 8001f06:	4413      	add	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f10:	f7fe fdee 	bl	8000af0 <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1a:	f7fe fde9 	bl	8000af0 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e36b      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 8001f2e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f32:	2202      	movs	r2, #2
 8001f34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f36:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	fa93 f2a3 	rbit	r2, r3
 8001f40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	fa93 f2a3 	rbit	r2, r3
 8001f58:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f62:	2202      	movs	r2, #2
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f74:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f76:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001f78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f7e:	2102      	movs	r1, #2
 8001f80:	6019      	str	r1, [r3, #0]
 8001f82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	fa93 f1a3 	rbit	r1, r3
 8001f8c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f90:	6019      	str	r1, [r3, #0]
  return result;
 8001f92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	2101      	movs	r1, #1
 8001faa:	fa01 f303 	lsl.w	r3, r1, r3
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1b2      	bne.n	8001f1a <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f000 8158 	beq.w	8002274 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fca:	4b5a      	ldr	r3, [pc, #360]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d112      	bne.n	8001ffc <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b57      	ldr	r3, [pc, #348]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a56      	ldr	r2, [pc, #344]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b54      	ldr	r3, [pc, #336]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	f107 0308 	add.w	r3, r7, #8
 8001ff4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	4b4f      	ldr	r3, [pc, #316]	; (800213c <HAL_RCC_OscConfig+0x938>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002004:	2b00      	cmp	r3, #0
 8002006:	d11a      	bne.n	800203e <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002008:	4b4c      	ldr	r3, [pc, #304]	; (800213c <HAL_RCC_OscConfig+0x938>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a4b      	ldr	r2, [pc, #300]	; (800213c <HAL_RCC_OscConfig+0x938>)
 800200e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002012:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002014:	f7fe fd6c 	bl	8000af0 <HAL_GetTick>
 8002018:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201c:	e009      	b.n	8002032 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201e:	f7fe fd67 	bl	8000af0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e2e9      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b42      	ldr	r3, [pc, #264]	; (800213c <HAL_RCC_OscConfig+0x938>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0ef      	beq.n	800201e <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d106      	bne.n	8002056 <HAL_RCC_OscConfig+0x852>
 8002048:	4b3a      	ldr	r3, [pc, #232]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	4a39      	ldr	r2, [pc, #228]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	6213      	str	r3, [r2, #32]
 8002054:	e02f      	b.n	80020b6 <HAL_RCC_OscConfig+0x8b2>
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10c      	bne.n	800207a <HAL_RCC_OscConfig+0x876>
 8002060:	4b34      	ldr	r3, [pc, #208]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	4a33      	ldr	r2, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002066:	f023 0301 	bic.w	r3, r3, #1
 800206a:	6213      	str	r3, [r2, #32]
 800206c:	4b31      	ldr	r3, [pc, #196]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a30      	ldr	r2, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002072:	f023 0304 	bic.w	r3, r3, #4
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	e01d      	b.n	80020b6 <HAL_RCC_OscConfig+0x8b2>
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	2b05      	cmp	r3, #5
 8002082:	d10c      	bne.n	800209e <HAL_RCC_OscConfig+0x89a>
 8002084:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	4a2a      	ldr	r2, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800208a:	f043 0304 	orr.w	r3, r3, #4
 800208e:	6213      	str	r3, [r2, #32]
 8002090:	4b28      	ldr	r3, [pc, #160]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	4a27      	ldr	r2, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 8002096:	f043 0301 	orr.w	r3, r3, #1
 800209a:	6213      	str	r3, [r2, #32]
 800209c:	e00b      	b.n	80020b6 <HAL_RCC_OscConfig+0x8b2>
 800209e:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a24      	ldr	r2, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a21      	ldr	r2, [pc, #132]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d06b      	beq.n	8002198 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c0:	f7fe fd16 	bl	8000af0 <HAL_GetTick>
 80020c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c8:	e00b      	b.n	80020e2 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe fd11 	bl	8000af0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80020da:	4293      	cmp	r3, r2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e291      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 80020e2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020e6:	2202      	movs	r2, #2
 80020e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ea:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	fa93 f2a3 	rbit	r2, r3
 80020f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80020fe:	2202      	movs	r2, #2
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	fa93 f2a3 	rbit	r2, r3
 800210c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002110:	601a      	str	r2, [r3, #0]
  return result;
 8002112:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002116:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	b2db      	uxtb	r3, r3
 800211e:	095b      	lsrs	r3, r3, #5
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d109      	bne.n	8002140 <HAL_RCC_OscConfig+0x93c>
 800212c:	4b01      	ldr	r3, [pc, #4]	; (8002134 <HAL_RCC_OscConfig+0x930>)
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x958>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	10908120 	.word	0x10908120
 800213c:	40007000 	.word	0x40007000
 8002140:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	4bbb      	ldr	r3, [pc, #748]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002160:	2102      	movs	r1, #2
 8002162:	6011      	str	r1, [r2, #0]
 8002164:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	fa92 f1a2 	rbit	r1, r2
 800216e:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002172:	6011      	str	r1, [r2, #0]
  return result;
 8002174:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002178:	6812      	ldr	r2, [r2, #0]
 800217a:	fab2 f282 	clz	r2, r2
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002184:	b2d2      	uxtb	r2, r2
 8002186:	f002 021f 	and.w	r2, r2, #31
 800218a:	2101      	movs	r1, #1
 800218c:	fa01 f202 	lsl.w	r2, r1, r2
 8002190:	4013      	ands	r3, r2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d099      	beq.n	80020ca <HAL_RCC_OscConfig+0x8c6>
 8002196:	e063      	b.n	8002260 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002198:	f7fe fcaa 	bl	8000af0 <HAL_GetTick>
 800219c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021a2:	f7fe fca5 	bl	8000af0 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e225      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 80021ba:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021be:	2202      	movs	r2, #2
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021d6:	2202      	movs	r2, #2
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021ee:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0302 	orr.w	r3, r3, #2
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0xa06>
 8002204:	4b90      	ldr	r3, [pc, #576]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	e00d      	b.n	8002226 <HAL_RCC_OscConfig+0xa22>
 800220a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800220e:	2202      	movs	r2, #2
 8002210:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002212:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	fa93 f2a3 	rbit	r2, r3
 800221c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	4b89      	ldr	r3, [pc, #548]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002226:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800222a:	2102      	movs	r1, #2
 800222c:	6011      	str	r1, [r2, #0]
 800222e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	fa92 f1a2 	rbit	r1, r2
 8002238:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800223c:	6011      	str	r1, [r2, #0]
  return result;
 800223e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002242:	6812      	ldr	r2, [r2, #0]
 8002244:	fab2 f282 	clz	r2, r2
 8002248:	b2d2      	uxtb	r2, r2
 800224a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	f002 021f 	and.w	r2, r2, #31
 8002254:	2101      	movs	r1, #1
 8002256:	fa01 f202 	lsl.w	r2, r1, r2
 800225a:	4013      	ands	r3, r2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1a0      	bne.n	80021a2 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002260:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002264:	2b01      	cmp	r3, #1
 8002266:	d105      	bne.n	8002274 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002268:	4b77      	ldr	r3, [pc, #476]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800226a:	69db      	ldr	r3, [r3, #28]
 800226c:	4a76      	ldr	r2, [pc, #472]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800226e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002272:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 81c2 	beq.w	8002604 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002280:	4b71      	ldr	r3, [pc, #452]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 030c 	and.w	r3, r3, #12
 8002288:	2b08      	cmp	r3, #8
 800228a:	f000 819c 	beq.w	80025c6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800228e:	1d3b      	adds	r3, r7, #4
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	2b02      	cmp	r3, #2
 8002296:	f040 8114 	bne.w	80024c2 <HAL_RCC_OscConfig+0xcbe>
 800229a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800229e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80022a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	fa93 f2a3 	rbit	r2, r3
 80022ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022b2:	601a      	str	r2, [r3, #0]
  return result;
 80022b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	461a      	mov	r2, r3
 80022cc:	2300      	movs	r3, #0
 80022ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7fe fc0e 	bl	8000af0 <HAL_GetTick>
 80022d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d8:	e009      	b.n	80022ee <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022da:	f7fe fc09 	bl	8000af0 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e18b      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 80022ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	fa93 f2a3 	rbit	r2, r3
 8002302:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002306:	601a      	str	r2, [r3, #0]
  return result;
 8002308:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800230c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	095b      	lsrs	r3, r3, #5
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d102      	bne.n	8002328 <HAL_RCC_OscConfig+0xb24>
 8002322:	4b49      	ldr	r3, [pc, #292]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	e01b      	b.n	8002360 <HAL_RCC_OscConfig+0xb5c>
 8002328:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800232c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002330:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	fa93 f2a3 	rbit	r2, r3
 800233c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002346:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	fa93 f2a3 	rbit	r2, r3
 8002356:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	4b3a      	ldr	r3, [pc, #232]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002364:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002368:	6011      	str	r1, [r2, #0]
 800236a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	fa92 f1a2 	rbit	r1, r2
 8002374:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002378:	6011      	str	r1, [r2, #0]
  return result;
 800237a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800237e:	6812      	ldr	r2, [r2, #0]
 8002380:	fab2 f282 	clz	r2, r2
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	f042 0220 	orr.w	r2, r2, #32
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	f002 021f 	and.w	r2, r2, #31
 8002390:	2101      	movs	r1, #1
 8002392:	fa01 f202 	lsl.w	r2, r1, r2
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d19e      	bne.n	80022da <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800239c:	4b2a      	ldr	r3, [pc, #168]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023a4:	1d3b      	adds	r3, r7, #4
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80023aa:	1d3b      	adds	r3, r7, #4
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	430b      	orrs	r3, r1
 80023b2:	4925      	ldr	r1, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	604b      	str	r3, [r1, #4]
 80023b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80023c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	fa93 f2a3 	rbit	r2, r3
 80023cc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d0:	601a      	str	r2, [r3, #0]
  return result;
 80023d2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023d6:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023d8:	fab3 f383 	clz	r3, r3
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ee:	f7fe fb7f 	bl	8000af0 <HAL_GetTick>
 80023f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023f6:	e009      	b.n	800240c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023f8:	f7fe fb7a 	bl	8000af0 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0fc      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 800240c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002416:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	fa93 f2a3 	rbit	r2, r3
 8002420:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002424:	601a      	str	r2, [r3, #0]
  return result;
 8002426:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800242a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800242c:	fab3 f383 	clz	r3, r3
 8002430:	b2db      	uxtb	r3, r3
 8002432:	095b      	lsrs	r3, r3, #5
 8002434:	b2db      	uxtb	r3, r3
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b01      	cmp	r3, #1
 800243e:	d105      	bne.n	800244c <HAL_RCC_OscConfig+0xc48>
 8002440:	4b01      	ldr	r3, [pc, #4]	; (8002448 <HAL_RCC_OscConfig+0xc44>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	e01e      	b.n	8002484 <HAL_RCC_OscConfig+0xc80>
 8002446:	bf00      	nop
 8002448:	40021000 	.word	0x40021000
 800244c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002450:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002454:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002456:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	fa93 f2a3 	rbit	r2, r3
 8002460:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800246a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	fa93 f2a3 	rbit	r2, r3
 800247a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	4b63      	ldr	r3, [pc, #396]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002488:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800248c:	6011      	str	r1, [r2, #0]
 800248e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	fa92 f1a2 	rbit	r1, r2
 8002498:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800249c:	6011      	str	r1, [r2, #0]
  return result;
 800249e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	fab2 f282 	clz	r2, r2
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f042 0220 	orr.w	r2, r2, #32
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	f002 021f 	and.w	r2, r2, #31
 80024b4:	2101      	movs	r1, #1
 80024b6:	fa01 f202 	lsl.w	r2, r1, r2
 80024ba:	4013      	ands	r3, r2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d09b      	beq.n	80023f8 <HAL_RCC_OscConfig+0xbf4>
 80024c0:	e0a0      	b.n	8002604 <HAL_RCC_OscConfig+0xe00>
 80024c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024c6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024da:	601a      	str	r2, [r3, #0]
  return result;
 80024dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	461a      	mov	r2, r3
 80024f4:	2300      	movs	r3, #0
 80024f6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f8:	f7fe fafa 	bl	8000af0 <HAL_GetTick>
 80024fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	e009      	b.n	8002516 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002502:	f7fe faf5 	bl	8000af0 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e077      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
 8002516:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800251e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	fa93 f2a3 	rbit	r2, r3
 800252a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800252e:	601a      	str	r2, [r3, #0]
  return result;
 8002530:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002534:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002536:	fab3 f383 	clz	r3, r3
 800253a:	b2db      	uxtb	r3, r3
 800253c:	095b      	lsrs	r3, r3, #5
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b01      	cmp	r3, #1
 8002548:	d102      	bne.n	8002550 <HAL_RCC_OscConfig+0xd4c>
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	e01b      	b.n	8002588 <HAL_RCC_OscConfig+0xd84>
 8002550:	f107 0320 	add.w	r3, r7, #32
 8002554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f107 0320 	add.w	r3, r7, #32
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	fa93 f2a3 	rbit	r2, r3
 8002564:	f107 031c 	add.w	r3, r7, #28
 8002568:	601a      	str	r2, [r3, #0]
 800256a:	f107 0318 	add.w	r3, r7, #24
 800256e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	f107 0318 	add.w	r3, r7, #24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	fa93 f2a3 	rbit	r2, r3
 800257e:	f107 0314 	add.w	r3, r7, #20
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	4b22      	ldr	r3, [pc, #136]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 8002586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002588:	f107 0210 	add.w	r2, r7, #16
 800258c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002590:	6011      	str	r1, [r2, #0]
 8002592:	f107 0210 	add.w	r2, r7, #16
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	fa92 f1a2 	rbit	r1, r2
 800259c:	f107 020c 	add.w	r2, r7, #12
 80025a0:	6011      	str	r1, [r2, #0]
  return result;
 80025a2:	f107 020c 	add.w	r2, r7, #12
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	fab2 f282 	clz	r2, r2
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	f042 0220 	orr.w	r2, r2, #32
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d19e      	bne.n	8002502 <HAL_RCC_OscConfig+0xcfe>
 80025c4:	e01e      	b.n	8002604 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025c6:	1d3b      	adds	r3, r7, #4
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	69db      	ldr	r3, [r3, #28]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e018      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025d4:	4b0e      	ldr	r3, [pc, #56]	; (8002610 <HAL_RCC_OscConfig+0xe0c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025dc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d108      	bne.n	8002600 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80025ee:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80025f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e000      	b.n	8002606 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b09e      	sub	sp, #120	; 0x78
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e162      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800262c:	4b90      	ldr	r3, [pc, #576]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d910      	bls.n	800265c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800263a:	4b8d      	ldr	r3, [pc, #564]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f023 0207 	bic.w	r2, r3, #7
 8002642:	498b      	ldr	r1, [pc, #556]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800264a:	4b89      	ldr	r3, [pc, #548]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d001      	beq.n	800265c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e14a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d008      	beq.n	800267a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b82      	ldr	r3, [pc, #520]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	497f      	ldr	r1, [pc, #508]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80dc 	beq.w	8002840 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d13c      	bne.n	800270a <HAL_RCC_ClockConfig+0xf6>
 8002690:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002694:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002696:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002698:	fa93 f3a3 	rbit	r3, r3
 800269c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800269e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a0:	fab3 f383 	clz	r3, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d102      	bne.n	80026ba <HAL_RCC_ClockConfig+0xa6>
 80026b4:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	e00f      	b.n	80026da <HAL_RCC_ClockConfig+0xc6>
 80026ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026be:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026c2:	fa93 f3a3 	rbit	r3, r3
 80026c6:	667b      	str	r3, [r7, #100]	; 0x64
 80026c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026cc:	663b      	str	r3, [r7, #96]	; 0x60
 80026ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80026de:	65ba      	str	r2, [r7, #88]	; 0x58
 80026e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026e2:	fa92 f2a2 	rbit	r2, r2
 80026e6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80026e8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80026ea:	fab2 f282 	clz	r2, r2
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	f042 0220 	orr.w	r2, r2, #32
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	f002 021f 	and.w	r2, r2, #31
 80026fa:	2101      	movs	r1, #1
 80026fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d17b      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e0f3      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d13c      	bne.n	800278c <HAL_RCC_ClockConfig+0x178>
 8002712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002716:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271a:	fa93 f3a3 	rbit	r3, r3
 800271e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	fab3 f383 	clz	r3, r3
 8002726:	b2db      	uxtb	r3, r3
 8002728:	095b      	lsrs	r3, r3, #5
 800272a:	b2db      	uxtb	r3, r3
 800272c:	f043 0301 	orr.w	r3, r3, #1
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b01      	cmp	r3, #1
 8002734:	d102      	bne.n	800273c <HAL_RCC_ClockConfig+0x128>
 8002736:	4b4f      	ldr	r3, [pc, #316]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	e00f      	b.n	800275c <HAL_RCC_ClockConfig+0x148>
 800273c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002744:	fa93 f3a3 	rbit	r3, r3
 8002748:	647b      	str	r3, [r7, #68]	; 0x44
 800274a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
 8002750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002752:	fa93 f3a3 	rbit	r3, r3
 8002756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002758:	4b46      	ldr	r3, [pc, #280]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002760:	63ba      	str	r2, [r7, #56]	; 0x38
 8002762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002764:	fa92 f2a2 	rbit	r2, r2
 8002768:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800276a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800276c:	fab2 f282 	clz	r2, r2
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	f042 0220 	orr.w	r2, r2, #32
 8002776:	b2d2      	uxtb	r2, r2
 8002778:	f002 021f 	and.w	r2, r2, #31
 800277c:	2101      	movs	r1, #1
 800277e:	fa01 f202 	lsl.w	r2, r1, r2
 8002782:	4013      	ands	r3, r2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d13a      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0b2      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
 800278c:	2302      	movs	r3, #2
 800278e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002792:	fa93 f3a3 	rbit	r3, r3
 8002796:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279a:	fab3 f383 	clz	r3, r3
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d102      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x1a0>
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	e00d      	b.n	80027d0 <HAL_RCC_ClockConfig+0x1bc>
 80027b4:	2302      	movs	r3, #2
 80027b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ba:	fa93 f3a3 	rbit	r3, r3
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
 80027c0:	2302      	movs	r3, #2
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	fa93 f3a3 	rbit	r3, r3
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	4b29      	ldr	r3, [pc, #164]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	2202      	movs	r2, #2
 80027d2:	61ba      	str	r2, [r7, #24]
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	fa92 f2a2 	rbit	r2, r2
 80027da:	617a      	str	r2, [r7, #20]
  return result;
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	fab2 f282 	clz	r2, r2
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	f042 0220 	orr.w	r2, r2, #32
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	f002 021f 	and.w	r2, r2, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f202 	lsl.w	r2, r1, r2
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e079      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b1d      	ldr	r3, [pc, #116]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	491a      	ldr	r1, [pc, #104]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 800280c:	4313      	orrs	r3, r2
 800280e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002810:	f7fe f96e 	bl	8000af0 <HAL_GetTick>
 8002814:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe f96a 	bl	8000af0 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e061      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b11      	ldr	r3, [pc, #68]	; (8002874 <HAL_RCC_ClockConfig+0x260>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b0b      	ldr	r3, [pc, #44]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d214      	bcs.n	8002878 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4906      	ldr	r1, [pc, #24]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b04      	ldr	r3, [pc, #16]	; (8002870 <HAL_RCC_ClockConfig+0x25c>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e040      	b.n	80028f2 <HAL_RCC_ClockConfig+0x2de>
 8002870:	40022000 	.word	0x40022000
 8002874:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d008      	beq.n	8002896 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	491a      	ldr	r1, [pc, #104]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4912      	ldr	r1, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80028b6:	f000 f829 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ba:	4601      	mov	r1, r0
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <HAL_RCC_ClockConfig+0x2e8>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c4:	22f0      	movs	r2, #240	; 0xf0
 80028c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	fa92 f2a2 	rbit	r2, r2
 80028ce:	60fa      	str	r2, [r7, #12]
  return result;
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	fab2 f282 	clz	r2, r2
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	40d3      	lsrs	r3, r2
 80028da:	4a09      	ldr	r2, [pc, #36]	; (8002900 <HAL_RCC_ClockConfig+0x2ec>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	fa21 f303 	lsr.w	r3, r1, r3
 80028e2:	4a08      	ldr	r2, [pc, #32]	; (8002904 <HAL_RCC_ClockConfig+0x2f0>)
 80028e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80028e6:	4b08      	ldr	r3, [pc, #32]	; (8002908 <HAL_RCC_ClockConfig+0x2f4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7fe f8bc 	bl	8000a68 <HAL_InitTick>
  
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3778      	adds	r7, #120	; 0x78
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	08003a84 	.word	0x08003a84
 8002904:	20000008 	.word	0x20000008
 8002908:	2000000c 	.word	0x2000000c

0800290c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	b480      	push	{r7}
 800290e:	b08b      	sub	sp, #44	; 0x2c
 8002910:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	2300      	movs	r3, #0
 8002920:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b04      	cmp	r3, #4
 8002934:	d002      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x30>
 8002936:	2b08      	cmp	r3, #8
 8002938:	d003      	beq.n	8002942 <HAL_RCC_GetSysClockFreq+0x36>
 800293a:	e03c      	b.n	80029b6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800293c:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800293e:	623b      	str	r3, [r7, #32]
      break;
 8002940:	e03c      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002948:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800294c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	fa92 f2a2 	rbit	r2, r2
 8002954:	607a      	str	r2, [r7, #4]
  return result;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	fab2 f282 	clz	r2, r2
 800295c:	b2d2      	uxtb	r2, r2
 800295e:	40d3      	lsrs	r3, r2
 8002960:	4a1c      	ldr	r2, [pc, #112]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002962:	5cd3      	ldrb	r3, [r2, r3]
 8002964:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002966:	4b19      	ldr	r3, [pc, #100]	; (80029cc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	220f      	movs	r2, #15
 8002970:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	fa92 f2a2 	rbit	r2, r2
 8002978:	60fa      	str	r2, [r7, #12]
  return result;
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	fab2 f282 	clz	r2, r2
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	40d3      	lsrs	r3, r2
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002986:	5cd3      	ldrb	r3, [r2, r3]
 8002988:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002994:	4a0e      	ldr	r2, [pc, #56]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	fbb2 f2f3 	udiv	r2, r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	627b      	str	r3, [r7, #36]	; 0x24
 80029a4:	e004      	b.n	80029b0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4a0c      	ldr	r2, [pc, #48]	; (80029dc <HAL_RCC_GetSysClockFreq+0xd0>)
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80029b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b2:	623b      	str	r3, [r7, #32]
      break;
 80029b4:	e002      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_GetSysClockFreq+0xc4>)
 80029b8:	623b      	str	r3, [r7, #32]
      break;
 80029ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	372c      	adds	r7, #44	; 0x2c
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	007a1200 	.word	0x007a1200
 80029d4:	08003a94 	.word	0x08003a94
 80029d8:	08003aa4 	.word	0x08003aa4
 80029dc:	003d0900 	.word	0x003d0900

080029e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b092      	sub	sp, #72	; 0x48
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	f000 80d0 	beq.w	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a04:	4b86      	ldr	r3, [pc, #536]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10e      	bne.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a10:	4b83      	ldr	r3, [pc, #524]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a82      	ldr	r2, [pc, #520]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	61d3      	str	r3, [r2, #28]
 8002a1c:	4b80      	ldr	r3, [pc, #512]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2e:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d118      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a3a:	4b7a      	ldr	r3, [pc, #488]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a79      	ldr	r2, [pc, #484]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a44:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a46:	f7fe f853 	bl	8000af0 <HAL_GetTick>
 8002a4a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	e008      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4e:	f7fe f84f 	bl	8000af0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b64      	cmp	r3, #100	; 0x64
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e0db      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a60:	4b70      	ldr	r3, [pc, #448]	; (8002c24 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f0      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a6c:	4b6c      	ldr	r3, [pc, #432]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a74:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d07d      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d076      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8a:	4b65      	ldr	r3, [pc, #404]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a98:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b5e      	ldr	r3, [pc, #376]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	6013      	str	r3, [r2, #0]
 8002ab8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	fa93 f3a3 	rbit	r3, r3
 8002ac4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac8:	fab3 f383 	clz	r3, r3
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b55      	ldr	r3, [pc, #340]	; (8002c28 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002ad2:	4413      	add	r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2300      	movs	r3, #0
 8002ada:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002adc:	4a50      	ldr	r2, [pc, #320]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d045      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7fe f800 	bl	8000af0 <HAL_GetTick>
 8002af0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af2:	e00a      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af4:	f7fd fffc 	bl	8000af0 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e086      	b.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b10:	fa93 f3a3 	rbit	r3, r3
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	2302      	movs	r3, #2
 8002b18:	623b      	str	r3, [r7, #32]
 8002b1a:	6a3b      	ldr	r3, [r7, #32]
 8002b1c:	fa93 f3a3 	rbit	r3, r3
 8002b20:	61fb      	str	r3, [r7, #28]
  return result;
 8002b22:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	095b      	lsrs	r3, r3, #5
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	f043 0302 	orr.w	r3, r3, #2
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d102      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b38:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	e007      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	fa93 f3a3 	rbit	r3, r3
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	4b35      	ldr	r3, [pc, #212]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2202      	movs	r2, #2
 8002b50:	613a      	str	r2, [r7, #16]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	fa92 f2a2 	rbit	r2, r2
 8002b58:	60fa      	str	r2, [r7, #12]
  return result;
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	fab2 f282 	clz	r2, r2
 8002b60:	b2d2      	uxtb	r2, r2
 8002b62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	f002 021f 	and.w	r2, r2, #31
 8002b6c:	2101      	movs	r1, #1
 8002b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0bd      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b78:	4b29      	ldr	r3, [pc, #164]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b7a:	6a1b      	ldr	r3, [r3, #32]
 8002b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	4926      	ldr	r1, [pc, #152]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d105      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b92:	4b23      	ldr	r3, [pc, #140]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b94:	69db      	ldr	r3, [r3, #28]
 8002b96:	4a22      	ldr	r2, [pc, #136]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0301 	and.w	r3, r3, #1
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d008      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002baa:	4b1d      	ldr	r3, [pc, #116]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	f023 0203 	bic.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	491a      	ldr	r1, [pc, #104]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bcc:	f023 0210 	bic.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	4912      	ldr	r1, [pc, #72]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d008      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002be6:	4b0e      	ldr	r3, [pc, #56]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	490b      	ldr	r1, [pc, #44]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c04:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	4903      	ldr	r1, [pc, #12]	; (8002c20 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3748      	adds	r7, #72	; 0x48
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40007000 	.word	0x40007000
 8002c28:	10908100 	.word	0x10908100

08002c2c <__libc_init_array>:
 8002c2c:	b570      	push	{r4, r5, r6, lr}
 8002c2e:	4e0d      	ldr	r6, [pc, #52]	; (8002c64 <__libc_init_array+0x38>)
 8002c30:	4c0d      	ldr	r4, [pc, #52]	; (8002c68 <__libc_init_array+0x3c>)
 8002c32:	1ba4      	subs	r4, r4, r6
 8002c34:	10a4      	asrs	r4, r4, #2
 8002c36:	2500      	movs	r5, #0
 8002c38:	42a5      	cmp	r5, r4
 8002c3a:	d109      	bne.n	8002c50 <__libc_init_array+0x24>
 8002c3c:	4e0b      	ldr	r6, [pc, #44]	; (8002c6c <__libc_init_array+0x40>)
 8002c3e:	4c0c      	ldr	r4, [pc, #48]	; (8002c70 <__libc_init_array+0x44>)
 8002c40:	f000 f820 	bl	8002c84 <_init>
 8002c44:	1ba4      	subs	r4, r4, r6
 8002c46:	10a4      	asrs	r4, r4, #2
 8002c48:	2500      	movs	r5, #0
 8002c4a:	42a5      	cmp	r5, r4
 8002c4c:	d105      	bne.n	8002c5a <__libc_init_array+0x2e>
 8002c4e:	bd70      	pop	{r4, r5, r6, pc}
 8002c50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c54:	4798      	blx	r3
 8002c56:	3501      	adds	r5, #1
 8002c58:	e7ee      	b.n	8002c38 <__libc_init_array+0xc>
 8002c5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c5e:	4798      	blx	r3
 8002c60:	3501      	adds	r5, #1
 8002c62:	e7f2      	b.n	8002c4a <__libc_init_array+0x1e>
 8002c64:	08003ab4 	.word	0x08003ab4
 8002c68:	08003ab4 	.word	0x08003ab4
 8002c6c:	08003ab4 	.word	0x08003ab4
 8002c70:	08003ab8 	.word	0x08003ab8

08002c74 <memset>:
 8002c74:	4402      	add	r2, r0
 8002c76:	4603      	mov	r3, r0
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d100      	bne.n	8002c7e <memset+0xa>
 8002c7c:	4770      	bx	lr
 8002c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002c82:	e7f9      	b.n	8002c78 <memset+0x4>

08002c84 <_init>:
 8002c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c86:	bf00      	nop
 8002c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8a:	bc08      	pop	{r3}
 8002c8c:	469e      	mov	lr, r3
 8002c8e:	4770      	bx	lr

08002c90 <_fini>:
 8002c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c92:	bf00      	nop
 8002c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c96:	bc08      	pop	{r3}
 8002c98:	469e      	mov	lr, r3
 8002c9a:	4770      	bx	lr
